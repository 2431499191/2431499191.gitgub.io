<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>8皇后问题</title>
      <link href="/2023/09/01/8%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
      <url>/2023/09/01/8%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>#数据结构与算法实验</p><p>八皇后问题</p><p>代码（未图形界面）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">using LL = long long;</span><br><span class="line"></span><br><span class="line">const int N = 10;</span><br><span class="line"></span><br><span class="line">LL ans = 0;</span><br><span class="line">LL n = 8;</span><br><span class="line">LL tt = 0;</span><br><span class="line">char c[10][10];</span><br><span class="line">struct node &#123;</span><br><span class="line">   LL x, y;</span><br><span class="line">&#125;a[N];</span><br><span class="line"></span><br><span class="line">bool st[10];</span><br><span class="line"></span><br><span class="line">void dfs(int u)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    if (u &gt; n) &#123;</span><br><span class="line">        for (int i = 1; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int j = 1; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; c[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        //ans++;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 1; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (!st[i])</span><br><span class="line">        &#123;</span><br><span class="line">            bool ok = true;</span><br><span class="line">            LL x = i, y = u;</span><br><span class="line">            for (int j = 1; j &lt; u; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                LL xx = a[j].x,yy = a[j].y;</span><br><span class="line">                if (abs(yy-y) == abs(x-xx)) &#123;</span><br><span class="line">                    ok = false;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (ok) &#123;</span><br><span class="line">                c[i][u] = &#x27;Q&#x27;;</span><br><span class="line">                st[i] = true;</span><br><span class="line">                a[++tt] = &#123; x,y &#125;;</span><br><span class="line">                dfs(u + 1);</span><br><span class="line">                st[i] = false;</span><br><span class="line">                c[i][u] = &#x27;.&#x27;;</span><br><span class="line">                tt--;</span><br><span class="line">            &#125;</span><br><span class="line">            else continue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)</span><br><span class="line">        for (int j = 1; j &lt;= n; j++)</span><br><span class="line">            c[i][j] = &#x27;.&#x27;;</span><br><span class="line">    dfs(1);</span><br><span class="line">    //cout &lt;&lt; ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    </span><br><span class="line">    LL t = 1;</span><br><span class="line">    while (t--) solve();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>砝码称重</title>
      <link href="/2023/06/07/%E7%A0%9D%E7%A0%81%E7%A7%B0%E9%87%8D/"/>
      <url>/2023/06/07/%E7%A0%9D%E7%A0%81%E7%A7%B0%E9%87%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>题目描述 5 个砝码，用天平称重时，我们希望用尽可能少的砝码组合称出尽可能多的重量。如果只有 5 个砝码，重量分别是 1，3，9，27，81。则它们可以组合称出 1 到 121 之间任意整数重量（砝码允许放在左右两个盘中）。本题目要求编程实现：对用户给定的重量，给出砝码组合方案。</p><span id="more"></span><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">27</span><span class="number">-9</span>+<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="ac代码"><a href="#ac代码" class="headerlink" title="ac代码"></a>ac代码</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">6</span>] = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">27</span>,<span class="number">81</span>&#125;;</span><br><span class="line"><span class="type">int</span> bb[<span class="number">6</span>], cc[<span class="number">6</span>];</span><br><span class="line"><span class="type">char</span> b[<span class="number">6</span>], c[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> sum, <span class="type">int</span> cnt, <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt;= ans)<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">-1</span>)<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sum == n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cc[i] = bb[i];</span><br><span class="line">c[i] = b[i];</span><br><span class="line">&#125;</span><br><span class="line">ans = cnt;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(sum, cnt, pos - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bb[pos] = a[pos];</span><br><span class="line">b[pos] = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line"><span class="built_in">dfs</span>(sum + a[pos], cnt + <span class="number">1</span>, pos - <span class="number">1</span>);</span><br><span class="line">bb[pos] = <span class="number">0</span>;</span><br><span class="line">b[pos] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bb[pos] = a[pos];</span><br><span class="line">b[pos] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"><span class="built_in">dfs</span>(sum - a[pos], cnt + <span class="number">1</span>, pos - <span class="number">1</span>);</span><br><span class="line">bb[pos] = <span class="number">0</span>;</span><br><span class="line">b[pos] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cc[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (m)cout &lt;&lt; c[i];</span><br><span class="line">cout &lt;&lt; cc[i]; m++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> -oj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间相交</title>
      <link href="/2023/06/05/%E5%8C%BA%E9%97%B4%E7%9B%B8%E4%BA%A4/"/>
      <url>/2023/06/05/%E5%8C%BA%E9%97%B4%E7%9B%B8%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>给定 x 轴上 n 个闭区间。去掉尽可能少的闭区间，使剩下的闭区间都不相交。 给定 n 个闭区间，计算去掉的最少闭区间数。<br>输入数据的第一行是正整数 n (n &lt;&#x3D; 100)，表示闭区间数。接下来的 n 行中，每行有 2 个整数，分别表示闭区间的 2 个数端点。</p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="number">10</span> <span class="number">15</span></span><br><span class="line"><span class="number">20</span> <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>见代码</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">&#125;a[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> e[N], ne[N], h[N], idx;</span><br><span class="line"><span class="type">bool</span> t[N],st[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[idx] = b; </span><br><span class="line">ne[idx] = h[a];</span><br><span class="line">h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.num &gt; b.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (t[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = h[a[i].i]; j!=<span class="number">-1</span>; j = ne[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (t[e[j]])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">a[i].l = <span class="built_in">min</span>(x, y);</span><br><span class="line">a[i].r = <span class="built_in">max</span>(x, y);</span><br><span class="line">a[i].i = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == i)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!(a[j].r&lt;a[i].l || a[j].l&gt;a[i].r)) &#123;</span><br><span class="line"><span class="built_in">add</span>(i, j);</span><br><span class="line">a[i].num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(a, a + n, cmp);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">f</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">t[i] = <span class="literal">true</span>;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">f</span>()) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> -oj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建立雷达</title>
      <link href="/2023/05/25/%E5%BB%BA%E7%AB%8B%E9%9B%B7%E8%BE%BE/"/>
      <url>/2023/05/25/%E5%BB%BA%E7%AB%8B%E9%9B%B7%E8%BE%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>一共有 n 个小岛位于 x 轴之上， x 轴为海岸， x 轴上方为海洋。现需要在海岸上建立雷达。在海岸建立的最少的雷达数目，使得雷达可以覆盖所有的小岛。可以认为每个小岛都是一 个点。如图所示，三个小岛分别是 P_1, P_2, P_3, 雷达的半径 d&#x3D;2, 在 x 轴上建立两个雷达 (-2,0) 和 (1,0) 就能覆盖三个小岛。<br>一共有 n 个小岛位于 x 轴之上， x 轴为海岸， x 轴上方为海洋。现需要在海岸上建立雷达。在海岸建立的最少的雷达数目，使得雷达可以覆盖所有的小岛。可以认为每个小岛都是一 个点。如图所示，三个小岛分别是 P_1, P_2, P_3, 雷达的半径 d&#x3D;2, 在 x 轴上建立两个雷达 (-2,0) 和 (1,0) 就能覆盖三个小岛。</p><span id="more"></span><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">-3</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Case <span class="number">1</span>:<span class="number">2</span></span><br><span class="line">Case <span class="number">2</span>:<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>处理出每一个小岛具海边为d的坐标，排序（按照做坐标从小到大）</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="type">double</span> x, y;</span><br><span class="line"><span class="type">double</span> x1, x2;</span><br><span class="line">&#125;a[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.x1 == b.x1)<span class="keyword">return</span> a.x2 &lt; b.x2;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.x1 &lt; b.x1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> tt =  <span class="number">1</span>,t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; d &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i].x &gt;&gt; a[i].y;</span><br><span class="line"><span class="keyword">if</span> (d &lt;a[i].y) &#123;</span><br><span class="line">a[i].x1 = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">a[i].x2 = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">double</span> l = <span class="built_in">sqrt</span>(d * d - a[i].y * a[i].y);</span><br><span class="line">a[i].x1 = a[i].x - l, a[i].x2 = a[i].x + l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>, a + <span class="number">1</span> + n, cmp);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="type">double</span> now = a[<span class="number">1</span>].x2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; now &lt;&lt; &quot; &quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n ; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; now &lt;&lt; &quot; &quot; &lt;&lt;a[i].x1&lt;&lt;&quot; &quot;&lt;&lt;a[i].x2&lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">if</span> (a[i].x1 == <span class="number">0x3f3f3f3f</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (a[i].x1 &lt;= now) &#123; <span class="keyword">if</span> (a[i].x2 &lt; now) now = a[i].x2; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ans++;</span><br><span class="line">now = a[i].x2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t!=<span class="number">0</span>)cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; tt++ &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; tt++ &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> oj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电池的寿命</title>
      <link href="/2023/05/25/%E7%94%B5%E6%B1%A0%E7%9A%84%E5%AF%BF%E5%91%BD/"/>
      <url>/2023/05/25/%E7%94%B5%E6%B1%A0%E7%9A%84%E5%AF%BF%E5%91%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>小S新买了一个掌上游戏机，这个游戏机由两节5号电池供电。为了保证能够长时间玩游戏，他买了很多 5 号电池，这些电池的生产商不同，质量也有差异，因而使用寿命也有所不同，有的能使用 5 个小时，有的可能就只能使用 3 个小时。显然如果他只有两个电池一个能用 5 小时一个能用 3 小时，那么他只能玩 3 个小时的游戏，有一个电池剩下的电量无法使用，但是如果他有更多的电池，就可以更加充分地利用它们，比如他有三个电池分别能用 3、3、5 小时，他可以先使用两节能用 3 个小时的电池，使用半个小时后再把其中一个换成能使用 5 个小时的电池，两个半小时后再把剩下的一节电池换成刚才换下的电池（那个电池还能用 2.5 个小时），这样总共就可以使用 5.5 个小时，没有一点浪费。 现在已知电池的数量和电池能够使用的时间，请你找一种方案使得使用时间尽可能的长。 </p><span id="more"></span><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.0</span></span><br><span class="line"><span class="number">5.5</span></span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>从大到小排序 分成两组 如果n&gt;2 答案就是和的一半（如果两组各自的和一样，不必多说，不一样肯等是电池多的总和多，内部消化就行了消化完就变成了组各自的和一样了） 否则就是最小的。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">sum += a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>  ans = sum / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(a, a + n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sum1 &gt; ans) &#123;</span><br><span class="line">sum1 -= a[i + <span class="number">1</span>];</span><br><span class="line">cnt1--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum1 += a[i];</span><br><span class="line">cnt1++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum2 = sum - sum1;</span><br><span class="line">cnt2 = n - cnt1;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> c = sum2 - sum1;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%.1f\n&quot;</span>, a[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%.1f\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> oj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01背包</title>
      <link href="/2023/05/19/01%E8%83%8C%E5%8C%85/"/>
      <url>/2023/05/19/01%E8%83%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>试设计一个用回溯法搜索子集空间树的函数。该函数的参数包括结点可行性判定函数和上界函数等必要的函数，并将此函数用于解 0-1 背包问题。0-1 背包问题描述如下：给定 n 种物品和一个背包。物品 i 的重量是w_i，其价值为v_i，背包的容量为C 。应如何选择装入背包的物品，使得装入背包中物品的总价值最大?在选择装入背包的物品时，对每种物品i只有2种选择，即装入背包或不装入背包。不能将物品i装入背包多次，也不能只装入部分的物品i。</p><p>第一行有2个正整数n和Cn是物品数C是背包的容量。接下来的 1 行中有 n 个正整数，表示物品的价值。第3行中<br>有 n 个正整数，表示物品的重量。         </p><p>将计算出的装入背包物品的最大价值和最优装入方案输出。第一行输出为：Optimal value is</p><span id="more"></span><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">10</span></span><br><span class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">5</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Optimal value is</span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="dfs代码（超时）"><a href="#dfs代码（超时）" class="headerlink" title="dfs代码（超时）"></a>dfs代码（超时）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, c,ans;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">bool</span> used[N];</span><br><span class="line"><span class="type">double</span> w[N], v[N];</span><br><span class="line"><span class="type">double</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="type">double</span> w, v;</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line">&#125;z[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> ww, <span class="type">int</span> vv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ww + w[u] &lt;= ans) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (u &gt; n) &#123;</span><br><span class="line"><span class="type">int</span> t = ans;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, ww);</span><br><span class="line"><span class="keyword">if</span>(ans!=t)<span class="built_in">memcpy</span>(used, st, n);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vv + b[u] &lt;= c) &#123;</span><br><span class="line">st[z[u].idx] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">dfs</span>(u + <span class="number">1</span>, ww + a[u], vv + b[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">st[z[u].idx] = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">dfs</span>(u + <span class="number">1</span>, ww, vv);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w/a.v &gt; b.w/a.v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; z[i].w;</span><br><span class="line">z[i].idx = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; z[i].v;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(z, z + n, cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">w[i] = a[i] = z[i].w;</span><br><span class="line">v[i] = b[i] =  z[i].v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">w[i] += w[i + <span class="number">1</span>];</span><br><span class="line">v[i] += v[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Optimal value is&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">cout &lt;&lt; used[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="记忆化搜素-未超时"><a href="#记忆化搜素-未超时" class="headerlink" title="记忆化搜素(未超时)"></a>记忆化搜素(未超时)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,t,ans;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> a[N][N];</span><br><span class="line"><span class="type">bool</span> st1[N], st2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> money, <span class="type">int</span> weight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (weight &gt; t)<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a[u][weight])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (money &lt; a[u][weight])<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a[u][weight] = money;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (u == n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = ans;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, money);</span><br><span class="line"><span class="keyword">if</span>(ans!=t)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)st2[i] = st1[i];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">st1[u] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(u + <span class="number">1</span>, money + v[u], weight + w[u]);</span><br><span class="line"></span><br><span class="line">st1[u] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(u + <span class="number">1</span>, money, weight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n&gt;&gt;t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)cin &gt;&gt; v[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)cin &gt;&gt; w[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> );</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Optimal value is&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)cout &lt;&lt; st2[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="dp代码（没问题）"><a href="#dp代码（没问题）" class="headerlink" title="dp代码（没问题）"></a>dp代码（没问题）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1005</span>;</span><br><span class="line"><span class="type">int</span> v[N];   </span><br><span class="line"><span class="type">int</span> w[N];  </span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">bool</span> path[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, c;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cin  &gt;&gt; w[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">cin &gt;&gt; v[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = c; j &gt;= v[i]; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (f[j] &lt; f[j - v[i]] + w[i])</span><br><span class="line">&#123;</span><br><span class="line">f[j] = f[j - v[i]] + w[i];</span><br><span class="line">path[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">f[j] = f[j];</span><br><span class="line">path[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;Optimal value is&quot;</span> &lt;&lt;endl&lt;&lt; f[c] &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> i = n, j = c,tt = n;</span><br><span class="line"><span class="keyword">while</span> (i &gt;= <span class="number">1</span> &amp;&amp; j &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (path[i][j])</span><br><span class="line">&#123;</span><br><span class="line">st[tt--] = <span class="number">1</span>;</span><br><span class="line">j -= v[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> st[tt--] = <span class="number">0</span>;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)cout &lt;&lt; st[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3505</span>;</span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL f[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        LL v, w;</span><br><span class="line">        cin &gt;&gt; v &gt;&gt; w;   </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= v; j--)</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - v] + w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f[m];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> oj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hero In Maze</title>
      <link href="/2023/05/18/Hero-In-Maze/"/>
      <url>/2023/05/18/Hero-In-Maze/</url>
      
        <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p><img src="https://cdn.jsdelivr.net/gh/2431499191/tu@main/202305181146212.png"></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">10</span></span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">S**P</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> n, m, k, ax, ay, bx, by;</span><br><span class="line"><span class="type">char</span> map[N][N];</span><br><span class="line">queue&lt;PII&gt; q;</span><br><span class="line"><span class="type">int</span> dist[N][N];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span> &#125;, dy[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q.<span class="built_in">push</span>(&#123; ax,ay &#125;);</span><br><span class="line">dist[ax][ay] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">PII t = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = t.first, y = t.second;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x == bx &amp;&amp; y == by) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> xx = x + dx[i], yy = y + dy[i];</span><br><span class="line"><span class="keyword">if</span> (xx &gt;= <span class="number">0</span> &amp;&amp; xx &lt; m &amp;&amp; yy &gt;= <span class="number">0</span> &amp;&amp; yy &lt; n &amp;&amp; dist[xx][yy]==<span class="number">-1</span> &amp;&amp; map[xx][yy]!=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">dist[xx][yy] = dist[x][y] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(dist[xx][yy]&lt;=k) q.<span class="built_in">push</span>(&#123; xx,yy &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &amp;&amp; n &amp;&amp; m &amp;&amp; k )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(map, <span class="string">&#x27; &#x27;</span>, <span class="keyword">sizeof</span> map);</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">-1</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; map[i][j];</span><br><span class="line"><span class="keyword">if</span> (map[i][j] == <span class="string">&#x27;S&#x27;</span>)ax = i, ay = j;</span><br><span class="line"><span class="keyword">if</span> (map[i][j] == <span class="string">&#x27;P&#x27;</span>)bx = i, by = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bfs</span>())cout &lt;&lt; <span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span>cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> oj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小鼠迷宫问题</title>
      <link href="/2023/05/18/%E5%B0%8F%E9%BC%A0%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/"/>
      <url>/2023/05/18/%E5%B0%8F%E9%BC%A0%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p><img src="https://cdn.jsdelivr.net/gh/2431499191/tu@main/202305181055738.png"></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span> <span class="number">8</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">6</span> <span class="number">6</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">7</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">96</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>bfs搜最短路<br>dfs最短路数量</p><p>只用一种应该也可以 bfs 分步乘法?</p><h2 id="ac代码"><a href="#ac代码" class="headerlink" title="ac代码"></a>ac代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, ax, ay, bx, by,ans,t,step;</span><br><span class="line"><span class="type">int</span> map[N][N];</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line">queue&lt;PII&gt; q;</span><br><span class="line"><span class="type">int</span> dist[N][N];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span> &#125;, dy[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q.<span class="built_in">push</span>(&#123; ax,ay &#125;);</span><br><span class="line">dist[ax][ay] = <span class="number">0</span>;</span><br><span class="line">st[ax][ay] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">PII t = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = t.first, y = t.second;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x == bx &amp;&amp; y == by) <span class="keyword">return</span> dist[x][y];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> xx = x + dx[i], yy = y + dy[i];</span><br><span class="line"><span class="keyword">if</span> (xx &gt;= <span class="number">1</span> &amp;&amp; xx &lt;= n &amp;&amp; yy &gt;= <span class="number">1</span> &amp;&amp; yy &lt;= n &amp;&amp; !st[xx][yy]&amp;&amp;!map[xx][yy])</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(&#123; xx,yy &#125;);</span><br><span class="line">dist[xx][yy] = dist[x][y] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s &gt; t)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(bx - x) + <span class="built_in">abs</span>(by - y) + s &gt; t)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (x == bx &amp;&amp; y == by &amp;&amp; s==t)</span><br><span class="line">&#123;</span><br><span class="line">step+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> xx = x + dx[i], yy = y + dy[i];</span><br><span class="line"><span class="keyword">if</span> (xx &gt;= <span class="number">1</span> &amp;&amp; xx &lt;= n &amp;&amp; yy &gt;= <span class="number">1</span> &amp;&amp; yy &lt;= n &amp;&amp; !st[xx][yy] &amp;&amp; !map[xx][yy])</span><br><span class="line">&#123;</span><br><span class="line">st[xx][yy] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">dfs</span>(xx, yy, s + <span class="number">1</span>);</span><br><span class="line">st[xx][yy] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; m &gt;&gt; k)</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="number">0x3f3f3f3f</span>; step = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(map, <span class="number">0</span>, <span class="keyword">sizeof</span> map);</span><br><span class="line"><span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line"><span class="keyword">while</span> (k--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line">cin &gt;&gt; i &gt;&gt; j;</span><br><span class="line">map[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; ax &gt;&gt; ay &gt;&gt; bx &gt;&gt; by;</span><br><span class="line"></span><br><span class="line">t = <span class="built_in">bfs</span>();</span><br><span class="line"><span class="keyword">if</span> (t == <span class="number">-1</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No Solution!&quot;</span> &lt;&lt; endl&lt;&lt;<span class="string">&quot;0&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line"><span class="built_in">dfs</span>(ax, ay, <span class="number">0</span>);</span><br><span class="line">cout &lt;&lt; t &lt;&lt; endl&lt;&lt;step&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> oj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Saving Tang Monk</title>
      <link href="/2023/05/17/Saving-Tang-Monk/"/>
      <url>/2023/05/17/Saving-Tang-Monk/</url>
      
        <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>有宽度不超过 100 的正方形迷宫如下所示,“K”代表开始孙悟空所处的位置，T代表唐僧所处的位置， .代表空地 #代表墙 S代表此处有一条蛇，数字 n 代表此处有钥匙且要是的种类编号是 1-9。孙悟空要去救唐僧，他只能朝上、下、左、由四个方向走，走到相邻的格子需要花1。#处不能走。走到S处则需要停留 1。走到放钥匙处，如果钥匙的种类编号为n，且孙悟空已经得到了编号为 1, 2, …, n-1 的钥匙，则它可以取走该钥匙，否则就只能过而不取。一共有 m 种钥匙 1-9，孙悟空走到唐僧处时，必须集齐 m 种钥匙才能救唐僧，否则只能过而不救。问孙悟空要救唐僧，最少要花多长时间。</p><span id="more"></span><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">1</span></span><br><span class="line">K . S</span><br><span class="line"># # <span class="number">1</span></span><br><span class="line"><span class="number">1</span> # T</span><br><span class="line"><span class="number">3</span> <span class="number">1</span></span><br><span class="line">K # T</span><br><span class="line">. S #</span><br><span class="line"><span class="number">1</span> # .</span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line">K # T</span><br><span class="line">. S .</span><br><span class="line"><span class="number">2</span> <span class="number">1</span> .</span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line">impossible</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="AC代码和思路"><a href="#AC代码和思路" class="headerlink" title="AC代码和思路"></a>AC代码和思路</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y, k, d;  <span class="comment">// 节点的位置坐标、已收集的钥匙数量、到达当前位置的步数</span></span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> xx, <span class="type">int</span> yy, <span class="type">int</span> kk, <span class="type">int</span> dd) &#123; x = xx; y = yy; k = kk; d = dd; &#125;  <span class="comment">// 构造函数用于初始化节点</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(node a, node b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.d &gt; b.d;  <span class="comment">// 重载&lt;运算符，用于优先队列的排序，根据步数从小到大排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, ans;  <span class="comment">// 迷宫的大小、钥匙的数量、最短路径的长度</span></span><br><span class="line"><span class="type">int</span> kx, ky, tx, ty;  <span class="comment">// 起始点和目标点的坐标</span></span><br><span class="line"><span class="type">char</span> s[N][N];  <span class="comment">// 存储迷宫的地图</span></span><br><span class="line"><span class="type">bool</span> st[N][N][<span class="number">15</span>];  <span class="comment">// 记录已访问的状态，第三维表示已收集的钥匙数量</span></span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;  <span class="comment">// 上下左右四个方向的偏移量</span></span><br><span class="line">priority_queue&lt;node&gt; q;  <span class="comment">// 优先队列，用于广度优先搜索</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">node <span class="title">start</span><span class="params">(kx, ky, <span class="number">0</span>, <span class="number">0</span>)</span></span>;  <span class="comment">// 起始节点</span></span><br><span class="line"></span><br><span class="line">    st[kx][ky][<span class="number">0</span>] = <span class="literal">true</span>;  <span class="comment">// 标记起始节点已访问</span></span><br><span class="line"></span><br><span class="line">    q.<span class="built_in">push</span>(start);  <span class="comment">// 将起始节点加入队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        node t = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();  <span class="comment">// 取出队首节点</span></span><br><span class="line">        <span class="type">int</span> x = t.x, y = t.y, key = t.k, d = t.d;  <span class="comment">// 获取节点的信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x == tx &amp;&amp; y == ty &amp;&amp; key == m)  <span class="comment">// 如果当前节点是目标节点，并且已经收集了所有的钥匙</span></span><br><span class="line">            ans = <span class="built_in">min</span>(ans, d);  <span class="comment">// 更新最短路径的长度</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;  <span class="comment">// 遍历四个方向</span></span><br><span class="line">            <span class="type">int</span> xx = x + dx[j], yy = y + dy[j];  <span class="comment">// 计算下一个节点的坐标</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断下一个节点是否合法，即在迷宫范围内，不是墙壁且没有访问过</span></span><br><span class="line">            <span class="keyword">if</span> (xx &gt;= <span class="number">1</span> &amp;&amp; xx &lt;= n &amp;&amp; yy &gt;= <span class="number">1</span> &amp;&amp; yy &lt;= n &amp;&amp; s[xx][yy] != <span class="string">&#x27;#&#x27;</span> &amp;&amp; !st[xx][yy][key]) &#123;</span><br><span class="line">                <span class="type">char</span> c = s[xx][yy];</span><br><span class="line">                <span class="type">int</span> kk = <span class="number">0</span>, ss = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">&#x27;S&#x27;</span>) ss++;</span><br><span class="line">                <span class="keyword">if</span> (c - <span class="string">&#x27;0&#x27;</span> - key == <span class="number">1</span>) kk++;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将下一个节点加入队列，更新已收集的钥匙数量和步数，并标记已访问</span></span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">node</span>(xx, yy, key + kk, d + ss));</span><br><span class="line">                st[xx][yy][key] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; m &amp;&amp; n &amp;&amp; m) &#123;</span><br><span class="line">        ans = <span class="number">0x3f3f3f3f</span>;  <span class="comment">// 初始化最短路径长度为一个很大的值</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);  <span class="comment">// 清空已访问的状态数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                cin &gt;&gt; s[i][j];  <span class="comment">// 读取迷宫的地图</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 记录起始点和目标点的坐标</span></span><br><span class="line">                <span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;K&#x27;</span>) kx = i, ky = j;</span><br><span class="line">                <span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;T&#x27;</span>) tx = i, ty = j;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">bfs</span>();  <span class="comment">// 进行广度优先搜索</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">0x3f3f3f3f</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;  <span class="comment">// 无法到达目标点</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;  <span class="comment">// 输出最短路径的长度</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">            q.<span class="built_in">pop</span>();  <span class="comment">// 清空队列</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> oj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flip Game</title>
      <link href="/2023/05/17/Flip-Game/"/>
      <url>/2023/05/17/Flip-Game/</url>
      
        <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>在一个 4 * 4 的棋盘上，每个格子都摆着一个棋子。棋子一面为黑，一面为白。有一种操作叫做“翻转”，对某一枚棋子做“翻转”操作，则会将该棋子及其上下左右的 4 枚棋子翻过来。给定初始的棋盘局面（有的棋子黑面朝上，有的棋子白面朝上），求最少需要多少次操作，能使得所有棋子都白面朝上或黑面朝上。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bwwb</span><br><span class="line">bbwb</span><br><span class="line">bwwb</span><br><span class="line">bwww</span><br></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>类似八数码 bfs搜就行</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">string start;</span><br><span class="line">queue&lt;string&gt; q;</span><br><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt; dis;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span> &#125;, dy[<span class="number">5</span>] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q.<span class="built_in">push</span>(start);</span><br><span class="line">dis[start] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">string t = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">string str = t;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t.<span class="built_in">find</span>(<span class="string">&#x27;b&#x27;</span>)== t.npos || t.<span class="built_in">find</span>(<span class="string">&#x27;w&#x27;</span>)==t.npos)<span class="keyword">return</span> dis[t];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> pos = i;</span><br><span class="line"><span class="type">int</span> x = pos / <span class="number">4</span>, y = pos % <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> xx = x + dx[j], yy = y + dy[j];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (xx &gt;= <span class="number">0</span> &amp;&amp; xx &lt;= <span class="number">3</span> &amp;&amp; yy &gt;= <span class="number">0</span> &amp;&amp; yy &lt;= <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> t = str[xx * <span class="number">4</span> + yy];</span><br><span class="line"><span class="keyword">if</span> (t == <span class="string">&#x27;b&#x27;</span>)str[xx * <span class="number">4</span> + yy] = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="string">&#x27;w&#x27;</span>)str[xx * <span class="number">4</span> + yy] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str != t&amp;&amp;!dis.<span class="built_in">count</span>(str)) &#123;</span><br><span class="line">dis[str] = dis[t] + <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Impossible&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">string c;</span><br><span class="line">cin &gt;&gt; c;</span><br><span class="line">start += c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t = <span class="built_in">bfs</span>();</span><br><span class="line"><span class="keyword">if</span> (t == <span class="number">-1</span>) cout &lt;&lt; <span class="string">&quot;Impossible&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="number">0</span>)cout &lt;&lt; <span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (t != <span class="number">-1</span> &amp;&amp; t)cout &lt;&lt; t;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> oj； </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变换的迷宫</title>
      <link href="/2023/05/16/%E5%8F%98%E6%8D%A2%E7%9A%84%E8%BF%B7%E5%AE%AB/"/>
      <url>/2023/05/16/%E5%8F%98%E6%8D%A2%E7%9A%84%E8%BF%B7%E5%AE%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>你身处一个 r*s 的迷宫中，当前位置用 S 表示，迷宫的出口用 E 表示。迷宫中有一些石头，用 # 表示，还有一些可以随意走动的区域，用 . 表示。初始时间为 0 时，你站在地图中标记为 S 的位置上。你每移动一步（向上、下、左、右方向移动）会花费一个单位时间。你必须一直保持移动，不能停留在原地不走。当前时间是 K 的倍数时，迷宫中的石头就会消失，此时你可以走到这些位置上。再其余的时间中，你不能走到石头所在的位置。求你从初始位置走到迷宫出口最少需要花费多少个单位时间。如果无法走到出口，则输出 Oop!。</p><span id="more"></span><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">6</span> <span class="number">6</span> <span class="number">2</span></span><br><span class="line">...S..</span><br><span class="line">...#..</span><br><span class="line">.#....</span><br><span class="line">...#..</span><br><span class="line">...#..</span><br><span class="line">..#E#.</span><br></pre></td></tr></table></figure><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>深搜（代码少）</p><p>在 dfs 函数中，通过在循环中添加条件判断来减少不必要的递归调用，从而提高程序效率。在进入递归之前，会先判断是否满足以下条件：</p><p>当前位置超出迷宫边界或已被访问过；<br>当前时间已经超过了最短时间；<br>当前位置是墙壁 # 且时间不是 k 的倍数。<br>如果上述条件中的任何一个成立，则跳过该方向的递归调用。</p><p>在主函数中，使用 memset 函数将整个迷宫数组 s 初始化为 #，而不是只对部分数组进行初始化。这确保了没有输入的位置都被视为墙壁。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s[N][N];</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">int</span> xs, ys, xe, ye;</span><br><span class="line"><span class="type">int</span> row, col, k;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span> &#125;, dy[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == xe &amp;&amp; y == ye)</span><br><span class="line">&#123;</span><br><span class="line">ans = time;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> xx = <span class="number">0</span>, yy = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> xx = x + dx[i], yy = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span>(!(x &lt;= <span class="number">0</span> || y &lt;= <span class="number">0</span> || x &gt; row || y &gt; col || st[xx][yy])&amp;&amp;!(time+<span class="number">1</span> &gt;= ans)&amp;&amp;!(s[xx][yy] == <span class="string">&#x27;#&#x27;</span> &amp;&amp; (time+<span class="number">1</span>) % k != <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">st[xx][yy] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(xx, yy, time + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">st[xx][yy] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (t--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; row &gt;&gt; col &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="built_in">memset</span>(s, <span class="string">&#x27;#&#x27;</span>, <span class="keyword">sizeof</span> s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= row; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= col; j++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; s[i][j];</span><br><span class="line"><span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;S&#x27;</span>)xs = i, ys = j;</span><br><span class="line"><span class="keyword">if</span> (s[i][j] == <span class="string">&#x27;E&#x27;</span>)xe = i, ye = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(xs, ys, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">0x3f3f3f3f</span>)cout &lt;&lt; <span class="string">&quot;Oop!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span>  cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> oj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单词序列</title>
      <link href="/2023/05/15/%E5%8D%95%E8%AF%8D%E5%BA%8F%E5%88%97/"/>
      <url>/2023/05/15/%E5%8D%95%E8%AF%8D%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>给出两个单词（开始单词和结束单词）以及一个词典。找出从开始单词转换到结束单词所需的最短转换序列。转换规则如下：每次只能改变一个字母；转换过程中出现的单词（除开始单词和结束单词外）必须存在于词典中。例如，开始单词为 hit，结束单词为 cog，词典为 hot, dog, dot, lot, log,那么一种可能的最短变换是 hit  hot  dot  dog  cog，所以返回的结果是序列的长度 5。注意：如果找不到这种变换，则输出 0；词典中所有单词的长度相同；所有的单词都由小写字母构成；开始单词和结束单词可以不在词典中。</p><span id="more"></span><p>输入<br>hit cog<br>hot dot dog lot log</p><p>输出<br>5</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">string start, last;</span><br><span class="line">queue&lt;string&gt; q;  <span class="comment">//队列</span></span><br><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt; dis;  <span class="comment">//string 对应的距离</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q.<span class="built_in">push</span>(start);</span><br><span class="line"></span><br><span class="line">dis[start] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">string t = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t == last)<span class="keyword">return</span> dis[last] ;</span><br><span class="line"></span><br><span class="line">string str = t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> d = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (d = <span class="string">&#x27;a&#x27;</span>; d &lt;= <span class="string">&#x27;z&#x27;</span>; d++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c = t[i];</span><br><span class="line">t[i] = d;</span><br><span class="line"><span class="keyword">if</span> (dis.<span class="built_in">count</span>(t)&amp;&amp;!dis[t]) <span class="comment">//在字典中并且是第一次出现</span></span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(t); <span class="comment">//入队</span></span><br><span class="line">dis[t] = dis[str] + <span class="number">1</span>; <span class="comment">//更新</span></span><br><span class="line">&#125;</span><br><span class="line">t[i] = c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dis[last];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; start &gt;&gt; last;</span><br><span class="line"></span><br><span class="line">cin.<span class="built_in">ignore</span>(); <span class="comment">// 忽略换行符</span></span><br><span class="line"></span><br><span class="line">string str;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">getline</span>(cin, str);</span><br><span class="line"></span><br><span class="line">string a[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line">dis[last] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c = str[i];</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span>)  tt++;</span><br><span class="line"><span class="keyword">if</span> (c != <span class="string">&#x27; &#x27;</span>)a[tt] += c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= tt; i++) dis[a[i]] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">bfs</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> oj </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八数码</title>
      <link href="/2023/05/15/%E5%85%AB%E6%95%B0%E7%A0%81/"/>
      <url>/2023/05/15/%E5%85%AB%E6%95%B0%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>有一个 3*3 的棋盘，其中有 1-9 共 9 个数字，0 表示空格,<br>其他的数字可以和 0 交换位置。求由初始状态到达目标状态</p><p>目标状态</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>如果问题无解，输出 unsolvable。<br>如果有解，则输出空格的移动序列。<br>u 表示将空格向上移，d 表示将空格向下移，l 表示左移，r 表示右移。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>两个unordered_map容器d和dd，分别用于保存状态到步数的映射和状态到移动方向的映射。同时还定义了一个unordered_map容器path，用于保存状态到前一个状态的映射，以便在找到解后可以回溯路径。</p><p>首先，从输入中读取初始状态start，并初始化目标状态e为固定的”123456780”。</p><p>接下来，调用bfs函数执行广度优先搜索。在搜索过程中，使用unordered_map容器d来保存已经搜索过的状态及其对应的步数。使用unordered_map容器dd来保存已经搜索过的状态及其对应的移动方向（用数字表示，0表示向下移动，1表示向上移动，2表示向左移动，3表示向右移动）。使用queue容器q来保存待搜索的状态。</p><p>在搜索过程中，首先将初始状态start入队，并将其对应的步数d[start]设为0。然后进入循环，直到队列为空。在每一次循环中，取出队列的头部状态t，并找到空格字符’0’的位置pos。如果当前状态t等于目标状态e，说明已经找到解，返回步数d[t]。</p><p>接下来，根据空格字符的位置pos，计算其所在的行x和列y。然后使用循环遍历四个移动方向，分别计算新的行坐标xx和列坐标yy。如果移动后的位置(xx, yy)在合法范围内，即xx在0到2之间，yy在0到2之间，则进行移动操作。将状态t中的空格字符’0’和位置(xx, yy)上的字符进行交换，得到新的状态new_state。如果新状态new_state在d中没有出现过（即未被访问过），则将其加入队列q中，并更新d[new_state]为d[t]+1，表示从初始状态到达新状态的步数。同时将移动方向i保存到dd[new_state]中，表示从前一个状态移动到新状态的方向。并将路径信息保存到path[new_state]中，表示新状态的前一个状态是t。</p><p>完成搜索后，如果没有找到解（d[t]仍然为0），或者找到解的步数为-1，则输出”unsolvable”。否则，调用ff函数进行路径回溯，从目标状态e开始，根据dd和path的信息逆序输出移动方向，即为从初始状态到目标状态的移动序列。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tt;</span><br><span class="line">string start, e;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span> &#125;, dy[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span> &#125;;<span class="comment">//下，上，左，右；</span></span><br><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt; d,dd;</span><br><span class="line">unordered_map&lt;string, string&gt; path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">queue&lt;string&gt; q;</span><br><span class="line"></span><br><span class="line">d[start] = <span class="number">0</span>;</span><br><span class="line">dd[start] = <span class="number">-1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(start);</span><br><span class="line"></span><br><span class="line">path[start] = <span class="string">&quot;xxxx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">string t = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pos = t.<span class="built_in">find</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t == e)<span class="keyword">return</span> d[t];</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; t &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">string str = t;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = pos / <span class="number">3</span>, y = pos % <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> xx = x + dx[i], yy = y + dy[i];</span><br><span class="line"><span class="keyword">if</span> (xx &gt;= <span class="number">0</span> &amp;&amp; xx &lt;= <span class="number">2</span> &amp;&amp; yy &gt;= <span class="number">0</span> &amp;&amp; yy &lt;= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(t[pos], t[(xx) * <span class="number">3</span> + yy]);</span><br><span class="line"><span class="keyword">if</span> (!d.<span class="built_in">count</span>(t))</span><br><span class="line">&#123;</span><br><span class="line">dd[t] = i;</span><br><span class="line">path[t] = str;</span><br><span class="line">q.<span class="built_in">push</span>(t);</span><br><span class="line">d[t] = d[str] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(t[pos], t[(xx) * <span class="number">3</span> + yy]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ff</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string a = <span class="string">&quot;123456780&quot;</span>;</span><br><span class="line">string dis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (dd[a] != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dd[a] == <span class="number">0</span>) dis += <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (dd[a] == <span class="number">1</span>) dis += <span class="string">&#x27;u&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (dd[a] == <span class="number">2</span>) dis += <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (dd[a] == <span class="number">3</span>) dis += <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line"></span><br><span class="line">a = path[a];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">reverse</span>(dis.<span class="built_in">begin</span>(), dis.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">cin &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> (c != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">start += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">start += c;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">e = <span class="string">&quot;123456780&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t = <span class="built_in">bfs</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t == <span class="number">-1</span>||t == <span class="number">0</span> )</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;unsolvable&quot;</span>;</span><br><span class="line"><span class="keyword">else</span>     <span class="built_in">ff</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/12/hello-world/"/>
      <url>/2023/05/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Sticks</title>
      <link href="/2023/05/11/%E6%9C%A8%E6%A3%8D/"/>
      <url>/2023/05/11/%E6%9C%A8%E6%A3%8D/</url>
      
        <content type="html"><![CDATA[<p>思路 怎么搜dfs(已经复原几根木棍k，上一个木棍的下标last，当前复原木棒的进度s).</p><span id="more"></span><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;  <span class="comment">//n木棍数量 </span></span><br><span class="line"><span class="type">int</span> num, len, sum;<span class="comment">//len原来的长度，sum目前小木棍长度之和，num = sum / len;</span></span><br><span class="line"><span class="type">int</span> a[N]; <span class="comment">//储存 木棍</span></span><br><span class="line"><span class="type">bool</span> st[N]; <span class="comment">//标记是否用过某一小木棍</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b; &#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> last, <span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (k &gt; num)<span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//所有木棍复原完成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s == len)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dfs</span>(k + <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);<span class="comment">//完成当前木棍的复原，进行下一个</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fail = <span class="number">0</span>;<span class="comment">//fail记录的是最近一次尝试拼接的木棍长度。这样再回溯时就不会再尝试相同长度的木棍。 （不是很理解还）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = last; i &lt;= n; i++)<span class="comment">//从last开始</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!st[i]&amp;&amp;a[i]+s&lt;=len&amp;&amp;fail!=a[i])<span class="comment">//a[i]+s&lt;=len减去不必要的搜索</span></span><br><span class="line">&#123;</span><br><span class="line">st[i] = <span class="literal">true</span>;<span class="comment">//标记</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dfs</span>(k, i, s + a[i]))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">st[i] = <span class="literal">false</span>;<span class="comment">//复原</span></span><br><span class="line"></span><br><span class="line">fail = a[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s == <span class="number">0</span> || s + a[i] == len)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//（菜狗还不是很理解）</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; n &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">m = num = len = sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">sum += a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (len = a[<span class="number">1</span>]; len &lt;= sum / <span class="number">2</span>; len++)<span class="comment">//保证整除并且len的长度小于sum/2 若大于则只有一根</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sum % len)<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">num = sum / len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">m = <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; len &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!m)cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> oj </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra算法</title>
      <link href="/2023/05/08/Dijkstra%E7%AE%97%E6%B3%95/"/>
      <url>/2023/05/08/Dijkstra%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Dijkstra求最短路（单源最短路，边权为正）"><a href="#Dijkstra求最短路（单源最短路，边权为正）" class="headerlink" title="Dijkstra求最短路（单源最短路，边权为正）"></a>Dijkstra求最短路（单源最短路，边权为正）</h1><p>给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环，所有边权均为正值。<br>请你求出 1 号点到 n 号点的最短距离。</p><span id="more"></span><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><p> a. 初始化 dist[1] &#x3D; 0, dist[i] &#x3D; +inf  S:当前已经确定为最短距离的点<br>    b. for(int i &#x3D; 1; i &lt;&#x3D; n; i ++)<br>        {<br>            1. 寻找不在 S 中距离源点最近的点 t<br>            2. 将 t 加到 S 中<br>            3. 用 t 更新其他点的距离(dist[j] &#x3D; min(dist[j], dist[t] + g[t][j]))<br>        }</p><pre><code>    时间复杂度 n方</code></pre><h2 id="正确性证明"><a href="#正确性证明" class="headerlink" title="正确性证明"></a>正确性证明</h2><p><a href="https://blog.csdn.net/CrazyKeyboardMan/article/details/78219970">https://blog.csdn.net/CrazyKeyboardMan/article/details/78219970</a><br>基于贪心</p><p>提醒：这里读者一定要反复仔细体会Lk<br>的含义，它不断更新的过程正是Dijkstra算法“由近及远，层层扩展”特点的体现。同时思考一下之前提过的“找到一个点后，该点Lk值肯定不会被更改”的原因（理解Lk的含义后，原因其实是显而易见的）。</p><p>以该点去松弛别的点（！st[i] 未使用过） 该点被标记位true 之后不会被松弛故之后不会被更改。</p><p>好吧，直觉上感觉是对的，每次找最小，再由最小去松弛，所有点更新完后，算法结束。</p><h2 id="朴素版"><a href="#朴素版" class="headerlink" title="朴素版"></a>朴素版</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">510</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> g[N][N];    <span class="comment">//为稠密阵所以用邻接矩阵存储</span></span><br><span class="line"><span class="type">int</span> dist[N];    <span class="comment">//用于记录每一个点距离第一个点的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">//用于记录该点的最短距离是否已经确定</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);     <span class="comment">//初始化距离  0x3f代表无限大</span></span><br><span class="line"></span><br><span class="line">    dist[<span class="number">1</span>]=<span class="number">0</span>;  <span class="comment">//第一个点到自身的距离为0 </span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    二刷的时候没有初始化</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)      <span class="comment">//有n个点所以要进行n次 迭代</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t=<span class="number">-1</span>;       <span class="comment">//t存储当前访问的点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)   <span class="comment">//这里的j代表的是从1号点开始</span></span><br><span class="line">            <span class="keyword">if</span>(!st[j]&amp;&amp;(t==<span class="number">-1</span>||dist[t]&gt;dist[j]))     </span><br><span class="line">                t=j;</span><br><span class="line"></span><br><span class="line">        st[t]=<span class="literal">true</span>;   </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)           <span class="comment">//依次更新每个点所到相邻的点路径值</span></span><br><span class="line">            dist[j]=<span class="built_in">min</span>(dist[j],dist[t]+g[t][j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dist[n]==<span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">//如果第n个点路径为无穷大即不存在最低路径</span></span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(g,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> g);    <span class="comment">//初始化图 因为是求最短路径</span></span><br><span class="line">                                <span class="comment">//所以每个点初始为无限大</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">        g[x][y]=<span class="built_in">min</span>(g[x][y],z);     <span class="comment">//如果发生重边的情况则保留最短的一条边</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="built_in">Dijkstra</span>()&lt;&lt;endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="优化版"><a href="#优化版" class="headerlink" title="优化版"></a>优化版</h2><p>找最小值（优先队列）和松弛操作（邻接表）优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1.5e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> h[N],e[N],ne[N],w[N],idx;</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b,w[idx] = c,ne[idx] = h[a],h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    </span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">// 忘记初始化</span></span><br><span class="line">    </span><br><span class="line">    priority_queue&lt;PII ,vector&lt;PII&gt;,greater&lt;PII&gt; &gt; heap;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(heap.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>(); <span class="comment">//对应朴素版的找最小值</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> ver = t.second,dis =t.first;</span><br><span class="line">        <span class="keyword">if</span>(st[ver]) <span class="keyword">continue</span>; <span class="comment">// 没有排除 该点已经是最小值且已经以它松弛过别的点</span></span><br><span class="line">        st[ver] = <span class="literal">true</span>;<span class="comment">//标记</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[ver];i!=<span class="number">-1</span>;i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j  = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[j]&gt;dis+w[i])<span class="comment">//这里二刷没有注意 入队是有条件的 集合的原因</span></span><br><span class="line">            &#123;</span><br><span class="line">                d[j] = dis+w[i];<span class="comment">//对应朴素版的松弛操作，不需要对不相邻的进行更新</span></span><br><span class="line">            </span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;d[j],j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(d[n]==<span class="number">0x3f3f3f3f</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> d[n];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    <span class="built_in">add</span>(a,b,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t  = <span class="built_in">f</span>();</span><br><span class="line">    cout&lt;&lt;t;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>n皇后</title>
      <link href="/2023/04/16/%E5%85%AB%E7%9A%87%E5%90%8E/"/>
      <url>/2023/04/16/%E5%85%AB%E7%9A%87%E5%90%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="递归求全排列"><a href="#递归求全排列" class="headerlink" title="递归求全排列"></a>递归求全排列</h1><p>给定一个整数 n，将数字 1∼n 排成一排，将会有很多种排列方法。</p><p>现在，请你按照字典序将所有的排列方法输出。</p><p>输入样例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>输出样例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 2 3</span><br><span class="line">1 3 2</span><br><span class="line">2 1 3</span><br><span class="line">2 3 1</span><br><span class="line">3 1 2</span><br><span class="line">3 2 1</span><br></pre></td></tr></table></figure><span id="more"></span><p>AC代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">include&lt;iostream&gt;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> path[N];<span class="comment">//保存序列</span></span><br><span class="line"><span class="type">int</span> state[N];<span class="comment">//数字是否被用过</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u &gt; n)<span class="comment">//数字填完了，输出</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//输出方案</span></span><br><span class="line">            cout &lt;&lt; path[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//空位上可以选择的数字为:1 ~ n</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!state[i])<span class="comment">//如果数字 i 没有被用过</span></span><br><span class="line">        &#123;</span><br><span class="line">            path[u] = i;<span class="comment">//放入空位</span></span><br><span class="line">            state[i] = <span class="number">1</span>;<span class="comment">//数字被用，修改状态</span></span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>);<span class="comment">//填下一个位</span></span><br><span class="line">            state[i] = <span class="number">0</span>;<span class="comment">//回溯，取出 i</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 path 数组保存排列，当排列的长度为 n 时，是一种方案，输出。<br>用 state 数组表示数字是否用过。当 state[i] 为 1 时：i 已经被用过，state[i] 为 0 时，i 没有被用过。<br>dfs(i) 表示的含义是：在 path[i] 处填写数字，然后递归的在下一个位置填写数字。<br>回溯：第 i 个位置填写某个数字的所有情况都遍历后， 第 i 个位置填写下一个数字。</p><h1 id="皇后问题"><a href="#皇后问题" class="headerlink" title="皇后问题"></a>皇后问题</h1><p>编写一个函数，求解皇后问题：在 n×n 的方格棋盘上，放置 n 个皇后，要求每个皇后不同行、不同列、不同左右对角线。</p><p>输入样例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>输出样例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 4 1 3</span><br><span class="line">3 1 4 2</span><br></pre></td></tr></table></figure><p>类似搜全排列 按行搜索 加上限制条件</p><p>AC代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,hh;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">bool</span> col[N],dg[N],udg[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        hh++;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!col[i]&amp;&amp;!dg[u+i]&amp;&amp;!udg[i-u+n])</span><br><span class="line">        &#123;</span><br><span class="line">            col[i] = <span class="number">1</span>;</span><br><span class="line">            dg[u+i] = <span class="number">1</span>;</span><br><span class="line">            udg[i-u+n] = <span class="number">1</span>;</span><br><span class="line">            a[u] = i;</span><br><span class="line">            <span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">            col[i] = <span class="number">0</span>;</span><br><span class="line">            dg[u+i] = <span class="number">0</span>;</span><br><span class="line">            udg[i-u+n] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cout&lt;&lt;hh;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bool数组用来判断搜索的下一个位置是否可行<br> col列，dg对角线，udg反对角线</p><p>(x,y)-&gt;(u,i)</p><p>y &#x3D; x+b; b &#x3D; y-x; 下标为正 需要加上一个数（随便加，保证为正且规则一样即可）</p><p>y &#x3D; -x+b; b &#x3D; y+x(正) </p>]]></content>
      
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（数组模拟）</title>
      <link href="/2023/04/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A8%A1%E6%8B%9F/"/>
      <url>/2023/04/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="链表（数组实现）"><a href="#链表（数组实现）" class="headerlink" title="链表（数组实现）"></a>链表（数组实现）</h1><p>实现一个单链表，初始化为空，支持头插，删除，插入</p><p>e[N]数组储存值（类型自定，可以有多个）ne[N]储存下一个值的下标 head头节点 </p><p>idx 数组大小同时每次++相当于开辟新空间然而没有。</p><span id="more"></span><h2 id="初始化-（数组-0-n-1）"><a href="#初始化-（数组-0-n-1）" class="headerlink" title="初始化 （数组 0-n-1）"></a>初始化 （数组 0-n-1）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;<span class="comment">//也可以为1 下面的操作都是以idx初始值为0进行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入操作（将x插入到下标为k（第k-1个数）的后面）"><a href="#插入操作（将x插入到下标为k（第k-1个数）的后面）" class="headerlink" title="插入操作（将x插入到下标为k（第k+1个数）的后面）"></a>插入操作（将x插入到下标为k（第k+1个数）的后面）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;<span class="comment">//插入x</span></span><br><span class="line">    ne[idx] = ne[k];<span class="comment">//idx下一个为原e[k]的下一个</span></span><br><span class="line">    ne[k] = idx;<span class="comment">//e[k]的下一个元素为x 通过ne[k]连接</span></span><br><span class="line">    idx++;<span class="comment">//类似开空间(其实已经开好)</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="删除操作（1-gt-2-gt-3删除2就是1-gt-3-2b并没有删除"><a href="#删除操作（1-gt-2-gt-3删除2就是1-gt-3-2b并没有删除" class="headerlink" title="删除操作（1-&gt;2-&gt;3删除2就是1-&gt;3 ,2b并没有删除)"></a>删除操作（1-&gt;2-&gt;3删除2就是1-&gt;3 ,2b并没有删除)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];</span><br><span class="line">    head = ne[head]<span class="comment">//删除头节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head;i!=<span class="number">-1</span>;i= ne[i])</span><br><span class="line">cout&lt;&lt;e[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++指针</title>
      <link href="/2023/04/11/c++%E6%8C%87%E9%92%88/"/>
      <url>/2023/04/11/c++%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<p>c++指针学习</p><p>为何学习指针呢？qwq因为用结构体实现的链表需要指针（看不懂）。</p><h2 id="1、何为指针"><a href="#1、何为指针" class="headerlink" title="1、何为指针"></a>1、何为指针</h2><p>指针是程序数据在内存中的地址，而指针变量是用来保存这些地址的变量。</p><span id="more"></span><h2 id="2、内存数据的规律"><a href="#2、内存数据的规律" class="headerlink" title="2、内存数据的规律"></a>2、内存数据的规律</h2><p> 1.计算机中所有数据都是以二进制储存的。<br> 2.数据类型决定了占用内存的大小<br> 3.占据内存的地址就是地址值最小的那个字节的地址 如数组a[10]，则数组a的地址为a[0]的地址。</p><h2 id="3、指针变量"><a href="#3、指针变量" class="headerlink" title="3、指针变量"></a>3、指针变量</h2><p> 指针变量就是用来保存指针的对象，我一般理解为保存地址。<br> 如果说指针变量p保存了变量a的地址，我们称p指向了变量a。<br> 我认为指针变量本身也是变量，所有指针变量的地址也可以被指向。</p><h2 id="4、创造指针变量"><a href="#4、创造指针变量" class="headerlink" title="4、创造指针变量"></a>4、创造指针变量</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T *p[<span class="number">10</span>];</span><br><span class="line">T 为类型（<span class="type">int</span>,<span class="type">double</span>,<span class="keyword">struct</span>等);</span><br></pre></td></tr></table></figure><h2 id="5、获取对象地址"><a href="#5、获取对象地址" class="headerlink" title="5、获取对象地址"></a>5、获取对象地址</h2><p>指针保存地址，要想获得地址，需要取地址符（&amp;）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>,b[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *z = b;z指向b[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> (*m)[<span class="number">10</span>] = &amp;b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>(*n)(<span class="type">int</span>,<span class="type">int</span>) = add;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *l  = <span class="string">&quot;hello world&quot;</span>;</span><br></pre></td></tr></table></figure><p>我们发现&amp;有时用，有时不用。<br> 小结：<br>1.数组名的值就是首个元素的值（数组在内存中连续储存）。<br>2.函数名的地址就是这个函数的地址。<br>3.字符串字面值常量作为右值时，就是这个字符串对应的字符数组的名称，也就是字符串的地址 。</p><h2 id="6、解析地址对象"><a href="#6、解析地址对象" class="headerlink" title="6、解析地址对象"></a>6、解析地址对象</h2><p> 如果指针指向了一个地址，则允许使用接应用符（*）来访问对象，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> age = <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p_age = &amp;age;</span><br><span class="line"></span><br><span class="line">*p_age = <span class="number">20</span>;<span class="comment">//通过指针修改指向的内存数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*p_age)<span class="comment">//通过指针读取</span></span><br></pre></td></tr></table></figure><p> 对于结构体和类 则使用-&gt;符号访问内部成员：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> name[<span class="number">31</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    Student stu = &#123;<span class="string">&quot;Bob&quot;</span> , <span class="number">19</span>, <span class="number">98.0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    Student*   p_s = &amp;stu;</span><br><span class="line"></span><br><span class="line">    p_s-&gt;age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    p_s-&gt;score = <span class="number">99.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;name:%s age:%d\n&quot;</span>,p_s-&gt;name,p_s-&gt;age);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、指针的状态"><a href="#7、指针的状态" class="headerlink" title="7、指针的状态"></a>7、指针的状态</h2><p> 指针的值（地址）总会是下列四种状态之一：<br> 1.指向一个对象的地址<br> 2.指向紧邻对象的下一个空间  用于迭代器和指针的运算 如end()就不是指向最后一个元素而是最后一个元素的下一个<br> 3.空指针 NULL（0）<br> 4.无效指针（野指针） 不是很懂搜到的记录一下<br>无效指针：指针变量的值是NULL，或者未知的地址值，或者是当前应用程序不可访问的地址值，这样的指针就是无效指针，不能对他们做解指针操作，否则程序会出现运行时错误，导致程序意外终止。<br>任何一个指针变量在做解地址操作前，都必须保证它指向的是有效的，可用的内存块，否则就会出错。坏指针是造成C语言Bug的最频繁的原因之一。<br>未经初始化的指针就是个无效指针，所以在定义指针变量的时候一定要进行初始化。如果实在是不知道指针的指向，则使用nullptr或NULL进行赋值。</p><h2 id="8、指针之间的赋值"><a href="#8、指针之间的赋值" class="headerlink" title="8、指针之间的赋值"></a>8、指针之间的赋值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p = &amp;a;</span><br><span class="line"><span class="type">int</span> *p1 = p;</span><br></pre></td></tr></table></figure><p>p与p1地址不同但指向的内存地址相同。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汉诺塔</title>
      <link href="/2023/04/09/%E6%B1%89%E8%AF%BA%E5%A1%94/"/>
      <url>/2023/04/09/%E6%B1%89%E8%AF%BA%E5%A1%94/</url>
      
        <content type="html"><![CDATA[<p>好好学习，天天向上。</p><h1 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h1><p>古代有一座汉诺塔， 塔内有 3 个座 A、B、C,A 座上有 几 个盘子， 盘子大小不等， 大的在下，小的 在上， 如图 4−1 所示。有一个和尚想把这n个盘子从A座移到 C座， 但每次只能移动一个盘子， 并且在移动过程中， 3 个座上的盘子始终保持大盘在下，小 盘在上。在移动过程中可以利用 B座来放盘子。要求输出移动的步骤。</p><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>只有一个盘子那就直接 a-&gt;c.</p><p>两个盘子需要先将上面的盘子移动到b盘</p><p>先a-&gt;b 再a-&gt;c 再b-&gt;c</p><p>三个盘子需要先将前两个盘子移动到b盘，再把第三个盘子移动到c盘，最后把上面两个盘子移动c盘上去</p><p>前两个盘子移动到b盘，就是问题转化成a到b 借助c盘  上面两个盘子从b到c转化成b到c借助a</p><p>总的思路就是 先把前n-1个盘子移动到b盘，</p><p>再把最后第n个盘子移动到c盘，</p><p>最后把前n-1个盘子移动到C盘上。</p><p><img src="https://cdn.jsdelivr.net/gh/2431499191/tu@main/202305041624109.png" alt="汉诺塔"></p><p>递归代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pf</span><span class="params">(<span class="type">char</span> a,<span class="type">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c-&gt;%c\n&quot;</span>,a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">char</span> a,<span class="type">char</span> b, <span class="type">char</span> c,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line"><span class="built_in">f</span>(a,c,b,n<span class="number">-1</span>);  </span><br><span class="line"></span><br><span class="line"><span class="built_in">pf</span>(a,c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">f</span>(b,a,c,n<span class="number">-1</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a = <span class="string">&#x27;A&#x27;</span>,b = <span class="string">&#x27;B&#x27;</span>,c = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">f</span>(a,b,c,n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> oj </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oj </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
